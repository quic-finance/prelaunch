{"ast":null,"code":"import { useCallback } from 'react';\nimport { useWallet } from 'use-wallet';\nimport useQuic from './useQuic';\nimport BigNumber from 'bignumber.js';\nimport { getQuicContract } from '../quic/utils';\n\nconst useRewardUpdate = () => {\n  const {\n    account\n  } = useWallet();\n  const quic = useQuic();\n  const quicContract = getQuicContract(quic);\n  const handleCapUpdate = useCallback(async amount => {\n    console.log(\"Updating the Cap to \" + amount);\n    const txHash = await rewardUpdate(quicContract, account, new BigNumber(parseInt(amount)));\n    console.log(txHash);\n    return txHash;\n  }, [quicContract]);\n  return {\n    onCapUpdate: handleCapUpdate\n  };\n};\n\nexport default useRewardUpdate;","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/quic.finance/client/src/hooks/useRewardUpdate.ts"],"names":["useCallback","useWallet","useQuic","BigNumber","getQuicContract","useRewardUpdate","account","quic","quicContract","handleCapUpdate","amount","console","log","txHash","rewardUpdate","parseInt","onCapUpdate"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAAoBC,eAApB,QAA2C,eAA3C;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAE5B,QAAM;AAAEC,IAAAA;AAAF,MAAcL,SAAS,EAA7B;AACA,QAAMM,IAAI,GAAGL,OAAO,EAApB;AACD,QAAMM,YAAY,GAAGJ,eAAe,CAACG,IAAD,CAApC;AAEC,QAAME,eAAe,GAAGT,WAAW,CACjC,MAAOU,MAAP,IAA0B;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBF,MAArC;AACA,UAAMG,MAAM,GAAG,MAAMC,YAAY,CAACN,YAAD,EAAeF,OAAf,EAAwB,IAAIH,SAAJ,CAAcY,QAAQ,CAACL,MAAD,CAAtB,CAAxB,CAAjC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,WAAOA,MAAP;AACD,GANgC,EAM9B,CAACL,YAAD,CAN8B,CAAnC;AAQA,SAAO;AAAEQ,IAAAA,WAAW,EAAEP;AAAf,GAAP;AACD,CAfD;;AAiBA,eAAeJ,eAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from 'use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport useQuic from './useQuic'\nimport BigNumber from 'bignumber.js'\nimport { capUpdate, getQuicContract } from '../quic/utils'\n\nconst useRewardUpdate = () => {\n\n  const { account } = useWallet()\n  const quic = useQuic()\n\tconst quicContract = getQuicContract(quic)\n\n  const handleCapUpdate = useCallback(\n    async (amount: string) => {\n      console.log(\"Updating the Cap to \" + amount)  \n      const txHash = await rewardUpdate(quicContract, account, new BigNumber(parseInt(amount)))\n      console.log(txHash)\n      return txHash\n    }, [quicContract])\n\n  return { onCapUpdate: handleCapUpdate}\n}\n\nexport default useRewardUpdate\n"]},"metadata":{},"sourceType":"module"}